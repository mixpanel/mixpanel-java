name: Release to Maven Central

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (e.g., 1.5.4)'
        required: true
        type: string

jobs:
  release:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up JDK 8
      uses: actions/setup-java@v4
      with:
        java-version: '8'
        distribution: 'temurin'

    - name: Cache Maven dependencies
      uses: actions/cache@v3
      with:
        path: ~/.m2/repository
        key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
        restore-keys: |
          ${{ runner.os }}-maven-

    - name: Import GPG key
      env:
        GPG_PRIVATE_KEY: ${{ secrets.GPG_PRIVATE_KEY }}
        GPG_PASSPHRASE: ${{ secrets.GPG_PASSPHRASE }}
      run: |
        echo "$GPG_PRIVATE_KEY" | base64 --decode | gpg --batch --import
        echo "allow-preset-passphrase" >> ~/.gnupg/gpg-agent.conf
        echo "pinentry-mode loopback" >> ~/.gnupg/gpg.conf
        gpg --list-secret-keys --keyid-format LONG

    - name: Configure Maven settings
      env:
        MAVEN_CENTRAL_USERNAME: ${{ secrets.MAVEN_CENTRAL_USERNAME }}
        MAVEN_CENTRAL_TOKEN: ${{ secrets.MAVEN_CENTRAL_TOKEN }}
      run: |
        mkdir -p ~/.m2
        cat > ~/.m2/settings.xml << EOF
        <settings>
          <servers>
            <server>
              <id>central</id>
              <username>${MAVEN_CENTRAL_USERNAME}</username>
              <password>${MAVEN_CENTRAL_TOKEN}</password>
            </server>
          </servers>
        </settings>
        EOF

    - name: Set version from tag
      if: startsWith(github.ref, 'refs/tags/')
      run: |
        VERSION=${GITHUB_REF#refs/tags/v}
        echo "VERSION=$VERSION" >> $GITHUB_ENV
        mvn versions:set -DnewVersion=$VERSION -DgenerateBackupPoms=false

    - name: Set version from input
      if: github.event_name == 'workflow_dispatch'
      run: |
        VERSION=${{ github.event.inputs.version }}
        echo "VERSION=$VERSION" >> $GITHUB_ENV
        mvn versions:set -DnewVersion=$VERSION -DgenerateBackupPoms=false

    - name: Run tests
      run: mvn clean test

    - name: Deploy to Maven Central
      env:
        GPG_PASSPHRASE: ${{ secrets.GPG_PASSPHRASE }}
      run: |
        mvn clean deploy -Dgpg.passphrase=$GPG_PASSPHRASE

    - name: Create GitHub Release
      if: startsWith(github.ref, 'refs/tags/')
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: Release ${{ env.VERSION }}
        body: |
          ## Mixpanel Java SDK v${{ env.VERSION }}

          ### Maven
          ```xml
          <dependency>
              <groupId>com.mixpanel</groupId>
              <artifactId>mixpanel-java</artifactId>
              <version>${{ env.VERSION }}</version>
          </dependency>
          ```

          ### Changes
          See [CHANGELOG](https://github.com/mixpanel/mixpanel-java/blob/master/CHANGELOG.md) for details.

          ### Links
          - [Maven Central](https://central.sonatype.com/artifact/com.mixpanel/mixpanel-java/${{ env.VERSION }})
          - [JavaDoc](http://mixpanel.github.io/mixpanel-java/)
        draft: false
        prerelease: false

  verify:
    needs: release
    runs-on: ubuntu-latest
    if: success()

    steps:
    - name: Wait for Maven Central sync
      run: sleep 300  # Wait 5 minutes for synchronization

    - name: Verify artifact on Maven Central
      run: |
        VERSION=${{ needs.release.outputs.version }}
        RESPONSE=$(curl -s -o /dev/null -w "%{http_code}" https://repo1.maven.org/maven2/com/mixpanel/mixpanel-java/${VERSION}/mixpanel-java-${VERSION}.jar)
        if [ $RESPONSE -eq 200 ]; then
          echo "✅ Artifact successfully published to Maven Central"
        else
          echo "⚠️ Artifact not yet available on Maven Central (HTTP $RESPONSE). This is normal - it may take up to 30 minutes to appear."
        fi